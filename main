/*
 * Laboratorio_3_Master.c
 *
 * Víctor Vanegas - 22839 y Fernando Palomo - 22357
 */ 

#define F_CPU 16000000UL
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include "SPI/SPI.h"
#include "UART/UART.h"


uint8_t valorSPI = 0, num = 0;
volatile uint8_t opcion = 0;
char buffer[10], cont = 0, c;
uint16_t numero = 0;
void refreshPORT(uint8_t valor);
void readUART(uint8_t p1);

int main(void)
{
	// Colocamos como entrada los puertor de los leds
	DDRC |= (1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3)|(1<<DDC4)|(1<<DDC5);
	DDRD |= (1<<DDD2)|(1<<DDD3);
	DDRB |= (1<<DDB2);
	PORTC &= ~((1<<PORTC0)|(1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3)|(1<<PORTC4)|(1<<PORTC5));
	PORTD &= ~((1<<PORTD2)|(1<<PORTD3));

	spiInit(SPI_MASTER_OSC_DIV16,SPI_DATA_ORDER_MSB,SPI_CLOCK_IDLE_LOW,SPI_CLOCK_FIRST_EDGE);
	UART_Init(9600); // Inicializar UART con baudrate 9600
	
	// Interfaz MobaXterm
	UART_Write_Text("Seleccione una opcion:\n \r");
	UART_Write_Text("1) Leer al esclavo\n \r");
	UART_Write_Text("2) Enviar al esclavo\n \r");
	
	while (1){
		
			opcion = UART_Read(); // Guardar la opción seleccionada
			
		if (opcion == '1'){
			spiWrite(1);
			//_delay_ms(1);
			
			PORTB &= ~(1<<PORTB2); //SLAVE SELECT
		
			spiWrite('c');
 			valorSPI = spiRead();
			_delay_ms(75);
			// Convertir el valor a texto y enviarlo por UART
			dtostrf((5.0 / 255) * valorSPI, 1, 2, buffer);  // Convertir a cadena con 2 decimales
			UART_Write_Text("Potenciometro 1: ");
			UART_Write_Text(buffer);
			UART_Write_Text("V\r\n");
			
			valorSPI = 0;
			
			_delay_ms(50);
			spiWrite('c');
			valorSPI = spiRead();
			// Convertir el valor a texto y enviarlo por UART
			dtostrf((5.0 / 255) * valorSPI, 1, 2, buffer);  // Convertir a cadena con 2 decimales
			UART_Write_Text("Potenciometro 2: ");
			UART_Write_Text(buffer);
			UART_Write_Text("V\r\n");
			refreshPORT(valorSPI);
			valorSPI = 0;
			
			PORTB |= (1<<PORTB2); //SLAVE SELECT
			
			UART_Write_Text("\n \rSeleccione una opcion:\n \r");
			UART_Write_Text("1) Leer al esclavo\n \r");
			UART_Write_Text("2) Enviar al esclavo\n \r");

			opcion = '0';	
				
			}else if (opcion == '2'){
				spiWrite(2);
				
				UART_Write_Text("Escoja un numero del 0 al 255 \n \r");
				refreshPORT(0);
				while (1) {
					c = UART_Read();  // Leer un carácter
					if (c == '\r' || c == '\n') {  // Si es "Enter", terminamos la lectura
						break;
					}
					if (c >= '0' && c <= '9') {  // Verificar que sea un dígito
						numero = (numero * 10) + (c - '0');  // Desplazar y agregar nuevo dígito
						UART_Write(c);  // Mostrar el número ingresado en la terminal
					}
				}
				if (numero >= 0 && numero <= 255) {  // Validación de rango
					UART_Write_Text("\n \rValor enviado correctamente \n \r");
					num = numero;
					spiWrite(num);
					numero = 0;
					} else {
					UART_Write_Text("\n \rValor incorrecto.\n\r");
					numero = 0;
				}
				
				UART_Write_Text("\n \rSeleccione una opcion:\n \r");
				UART_Write_Text("1) Leer al esclavo\n \r");
				UART_Write_Text("2) Enviar al esclavo\n \r");
				
				opcion = '0';
			
			}else{	
				UART_Write_Text("Numero incorrecto \n \r");
				
				UART_Write_Text("\n \rSeleccione una opcion:\n \r");
				UART_Write_Text("1) Leer al esclavo\n \r");
				UART_Write_Text("2) Enviar al esclavo\n \r");
				opcion = '0';
			}
		}
}

void refreshPORT(uint8_t valor){
	if(valor & 0b10000000){
		PORTC |= (1<<PORTC5);
		}else{
		PORTC &= ~(1<<PORTC5);
	}
	if(valor & 0b01000000){
		PORTC |= (1<<PORTC4);
		}else{
		PORTC &= ~(1<<PORTC4);
	}
	if(valor & 0b00100000){
		PORTC |= (1<<PORTC3);
		}else{
		PORTC &= ~(1<<PORTC3);
	}
	if(valor & 0b00010000){
		PORTC |= (1<<PORTC2);
		}else{
		PORTC &= ~(1<<PORTC2);
	}
	if(valor & 0b00001000){
		PORTC |= (1<<PORTC1);
		}else{
		PORTC &= ~(1<<PORTC1);
	}
	if(valor & 0b00000100){
		PORTC |= (1<<PORTC0);
		}else{
		PORTC &= ~(1<<PORTC0);
	}
	if(valor & 0b00000010){
		PORTD |= (1<<PORTD2);
		}else{
		PORTD &= ~(1<<PORTD2);
	}
	if(valor & 0b00000001){
		PORTD |= (1<<PORTD3);
		}else{
		PORTD &= ~(1<<PORTD3);
	}
}
